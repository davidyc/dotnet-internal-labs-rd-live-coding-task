    Цель задания: Научить студентов использовать множественные блоки catch для обработки различных типов исключений.

Создайте класс MathOperation, в котором будут два статических метода:

Divide(int dividend, int divisor): Метод для деления двух чисел. Он должен возвращать результат деления (целое число).
ParseAndDivide(string dividendStr, string divisorStr): Метод, который сначала парсит строки dividendStr и divisorStr в целые числа, а затем вызывает метод Divide для выполнения деления.
В методе ParseAndDivide, используйте try-catch для обработки исключений:

В первом блоке try, попробуйте выполнить парсинг строк dividendStr и divisorStr в целые числа.
Во втором блоке catch, обработайте исключение, которое может возникнуть при парсинге (например, FormatException). Выведите сообщение об ошибке пользователю, что входные данные не являются числами.
В третьем блоке catch, обработайте исключение деления на ноль (например, DivideByZeroException). Выведите сообщение пользователю, что деление на ноль недопустимо.
В методе Main:

Запросите у пользователя ввести два числа в виде строк.
Вызовите метод ParseAndDivide с этими введенными строками.
Выведите результат деления, если деление прошло успешно, или сообщение об ошибке, если возникли исключения.



    Цель задания: Научить студентов создавать пользовательские исключения и использовать множественные блоки catch для их обработки.

Создайте пользовательское исключение InvalidDataException, которое будет представлять ошибку неверных данных.

Создайте класс DataProcessor, в котором будет статический метод ProcessData, который принимает массив целых чисел.

В методе ProcessData:

Проверьте, что массив не является null и содержит хотя бы один элемент. Если условие не выполняется, выбросьте исключение InvalidDataException с сообщением о недопустимых данных.
Найдите максимальное и минимальное значение в массиве и выведите их на экран.
В методе Main:

Запросите у пользователя ввести целые числа, разделяя их пробелами.
Разделите введенные числа, чтобы получить массив строк.
Попробуйте преобразовать каждую строку в целое число и добавьте их в новый массив целых чисел.
Вызовите метод ProcessData с созданным массивом.
Обработайте исключения:

В месте вызова метода ProcessData, используйте множественные блоки catch для обработки исключения InvalidDataException и исключения, которое может возникнуть при преобразовании строки в целое число (например, FormatException). Выведите сообщения об ошибках соответствующим образом.
Примечание: Задание на использование множественных блоков catch с пользовательским исключением поможет студентам понять, как создавать и обрабатывать свои собственные исключения, а также как обрабатывать исключения, которые могут возникнуть при преобразовании данных.